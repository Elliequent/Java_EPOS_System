/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package resarfnai;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 * @author Ian Fraser
 * Date: 28/03/2020
 * Description: EPOS System Assessment - Ian Fraser - EPOS System GUI
 */

public class EPOS_System_GUI extends javax.swing.JFrame {

    
    // GLOBAL VARIABLES
    ArrayList<Product> products = new ArrayList();
    ArrayList<Double> salesFigures = new ArrayList();
    User loginuser = new User();
    double total = 0;
    int customerCounter;
    int productMultiplier;
    
    
    /**
     * Creates new form EPOS_System_GUI
     */
    
    public EPOS_System_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabMain = new javax.swing.JTabbedPane();
        tabLogin = new javax.swing.JTabbedPane();
        tabStaff = new javax.swing.JTabbedPane();
        Sales = new javax.swing.JPanel();
        btnApples = new javax.swing.JButton();
        btnBananas = new javax.swing.JButton();
        btnGrapes = new javax.swing.JButton();
        btnPeaches = new javax.swing.JButton();
        btnBlueberries = new javax.swing.JButton();
        btnStrawberries = new javax.swing.JButton();
        btnPears = new javax.swing.JButton();
        btnPlums = new javax.swing.JButton();
        btnMelons = new javax.swing.JButton();
        comboSalesItems = new javax.swing.JComboBox<>();
        btnCheckout = new javax.swing.JButton();
        btnClearItem = new javax.swing.JButton();
        txtSalesTotal = new javax.swing.JTextField();
        lblSalesTotal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSalesItems = new javax.swing.JTextArea();
        btnCancelSale = new javax.swing.JButton();
        comboBoxMultipler = new javax.swing.JComboBox<>();
        tabSalesRecords = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSalesStaffRecord = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSalesRecords = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtSalesDetails = new javax.swing.JTextArea();
        tabManager = new javax.swing.JTabbedPane();
        tabManagerStaff = new javax.swing.JPanel();
        comboStaffRecords = new javax.swing.JComboBox<>();
        lblStaffName = new javax.swing.JLabel();
        lblStaffID = new javax.swing.JLabel();
        lblStaffDOB = new javax.swing.JLabel();
        lblStaffDate = new javax.swing.JLabel();
        txtStaffFirstName = new javax.swing.JTextField();
        txtStaffLastName = new javax.swing.JTextField();
        txtStaffUsername = new javax.swing.JTextField();
        txtStaffPassword = new javax.swing.JTextField();
        btnCreateStaff = new javax.swing.JButton();
        btnUpdateStaff = new javax.swing.JButton();
        btnDeleteStaff = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtStaffSalesRecord = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtStaffRecordDetails = new javax.swing.JTextArea();
        btnDeleteStaffRecord = new javax.swing.JButton();
        btnDeleteAllStaffRecords = new javax.swing.JButton();
        comboStaffSalesRecords = new javax.swing.JComboBox<>();
        txtStaffManager = new javax.swing.JTextField();
        lblStaffManager = new javax.swing.JLabel();
        lblStaffError = new javax.swing.JLabel();
        tabManagerProducts = new javax.swing.JPanel();
        comboProductsRecord = new javax.swing.JComboBox<>();
        lblProductName = new javax.swing.JLabel();
        lblProductPrice = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        txtProductPrice = new javax.swing.JTextField();
        btnCreateProduct = new javax.swing.JButton();
        btnUpdateProduct = new javax.swing.JButton();
        btnDeleteProduct = new javax.swing.JButton();
        lblProductsError = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabMain.addTab("Login", tabLogin);

        btnApples.setIcon(new javax.swing.ImageIcon(getClass().getResource("/apple.png"))); // NOI18N
        btnApples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplesActionPerformed(evt);
            }
        });

        btnBananas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/banana.png"))); // NOI18N
        btnBananas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBananasActionPerformed(evt);
            }
        });

        btnGrapes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/grape.png"))); // NOI18N
        btnGrapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrapesActionPerformed(evt);
            }
        });

        btnPeaches.setIcon(new javax.swing.ImageIcon(getClass().getResource("/peach.png"))); // NOI18N
        btnPeaches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPeachesActionPerformed(evt);
            }
        });

        btnBlueberries.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blueberry.png"))); // NOI18N
        btnBlueberries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlueberriesActionPerformed(evt);
            }
        });

        btnStrawberries.setIcon(new javax.swing.ImageIcon(getClass().getResource("/strawberry.png"))); // NOI18N
        btnStrawberries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStrawberriesActionPerformed(evt);
            }
        });

        btnPears.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pear.png"))); // NOI18N
        btnPears.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPearsActionPerformed(evt);
            }
        });

        btnPlums.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plum.png"))); // NOI18N
        btnPlums.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlumsActionPerformed(evt);
            }
        });

        btnMelons.setIcon(new javax.swing.ImageIcon(getClass().getResource("/melon.png"))); // NOI18N
        btnMelons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMelonsActionPerformed(evt);
            }
        });

        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        btnClearItem.setText("Clear Item");
        btnClearItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearItemActionPerformed(evt);
            }
        });

        lblSalesTotal.setText("Total: ");

        txtSalesItems.setColumns(20);
        txtSalesItems.setRows(5);
        jScrollPane1.setViewportView(txtSalesItems);

        btnCancelSale.setText("Cancel Sale");
        btnCancelSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelSaleActionPerformed(evt);
            }
        });

        comboBoxMultipler.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        comboBoxMultipler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMultiplerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SalesLayout = new javax.swing.GroupLayout(Sales);
        Sales.setLayout(SalesLayout);
        SalesLayout.setHorizontalGroup(
            SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnApples, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGrapes, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBananas, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBlueberries, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPlums, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPears, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPeaches, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMelons, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStrawberries, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SalesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClearItem, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelSale, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SalesLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboSalesItems, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SalesLayout.createSequentialGroup()
                                .addComponent(lblSalesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSalesTotal))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(comboBoxMultipler, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        SalesLayout.setVerticalGroup(
            SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SalesLayout.createSequentialGroup()
                .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SalesLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnApples, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPeaches, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBlueberries, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBananas, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStrawberries, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPears, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGrapes, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMelons, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPlums, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(SalesLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxMultipler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboSalesItems, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSalesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSalesTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancelSale, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClearItem, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabStaff.addTab("Sales", Sales);

        txtSalesStaffRecord.setColumns(20);
        txtSalesStaffRecord.setRows(5);
        jScrollPane2.setViewportView(txtSalesStaffRecord);

        txtSalesRecords.setColumns(20);
        txtSalesRecords.setRows(5);
        jScrollPane3.setViewportView(txtSalesRecords);

        txtSalesDetails.setColumns(20);
        txtSalesDetails.setRows(5);
        jScrollPane4.setViewportView(txtSalesDetails);

        javax.swing.GroupLayout tabSalesRecordsLayout = new javax.swing.GroupLayout(tabSalesRecords);
        tabSalesRecords.setLayout(tabSalesRecordsLayout);
        tabSalesRecordsLayout.setHorizontalGroup(
            tabSalesRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabSalesRecordsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tabSalesRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        tabSalesRecordsLayout.setVerticalGroup(
            tabSalesRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabSalesRecordsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabSalesRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabSalesRecordsLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        tabStaff.addTab("Sales Records", tabSalesRecords);

        tabMain.addTab("Staff", tabStaff);

        comboStaffRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboStaffRecordsActionPerformed(evt);
            }
        });

        lblStaffName.setText("First name:");

        lblStaffID.setText("Last name:");

        lblStaffDOB.setText("Username:");

        lblStaffDate.setText("Password:");

        btnCreateStaff.setText("Create");
        btnCreateStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateStaffActionPerformed(evt);
            }
        });

        btnUpdateStaff.setText("Update");
        btnUpdateStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStaffActionPerformed(evt);
            }
        });

        btnDeleteStaff.setText("Delete");
        btnDeleteStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStaffActionPerformed(evt);
            }
        });

        txtStaffSalesRecord.setColumns(20);
        txtStaffSalesRecord.setRows(5);
        jScrollPane5.setViewportView(txtStaffSalesRecord);

        txtStaffRecordDetails.setColumns(20);
        txtStaffRecordDetails.setRows(5);
        jScrollPane6.setViewportView(txtStaffRecordDetails);

        btnDeleteStaffRecord.setText("Delete Record");
        btnDeleteStaffRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStaffRecordActionPerformed(evt);
            }
        });

        btnDeleteAllStaffRecords.setText("Delete All Records");
        btnDeleteAllStaffRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllStaffRecordsActionPerformed(evt);
            }
        });

        lblStaffManager.setText("Manager / Staff:");

        javax.swing.GroupLayout tabManagerStaffLayout = new javax.swing.GroupLayout(tabManagerStaff);
        tabManagerStaff.setLayout(tabManagerStaffLayout);
        tabManagerStaffLayout.setHorizontalGroup(
            tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabManagerStaffLayout.createSequentialGroup()
                .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabManagerStaffLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lblStaffError, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabManagerStaffLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(comboStaffRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabManagerStaffLayout.createSequentialGroup()
                                    .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblStaffDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblStaffDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblStaffID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblStaffName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtStaffPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                        .addComponent(txtStaffUsername)
                                        .addComponent(txtStaffLastName)
                                        .addComponent(txtStaffFirstName)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabManagerStaffLayout.createSequentialGroup()
                                    .addComponent(lblStaffManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(6, 6, 6)
                                    .addComponent(txtStaffManager, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(tabManagerStaffLayout.createSequentialGroup()
                                .addComponent(btnCreateStaff)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateStaff)
                                .addGap(46, 46, 46)
                                .addComponent(btnDeleteStaff)))))
                .addGap(28, 28, 28)
                .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                    .addComponent(jScrollPane6)
                    .addComponent(comboStaffSalesRecords, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabManagerStaffLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeleteStaffRecord)
                .addGap(65, 65, 65)
                .addComponent(btnDeleteAllStaffRecords)
                .addGap(74, 74, 74))
        );
        tabManagerStaffLayout.setVerticalGroup(
            tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabManagerStaffLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboStaffRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboStaffSalesRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabManagerStaffLayout.createSequentialGroup()
                        .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStaffName)
                            .addComponent(txtStaffFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStaffID)
                            .addComponent(txtStaffLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStaffDOB)
                            .addComponent(txtStaffUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStaffDate)
                            .addComponent(txtStaffPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane5))
                .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabManagerStaffLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabManagerStaffLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStaffManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStaffManager))
                        .addGap(18, 18, 18)
                        .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCreateStaff)
                            .addComponent(btnUpdateStaff)
                            .addComponent(btnDeleteStaff))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStaffError)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabManagerStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeleteStaffRecord)
                    .addComponent(btnDeleteAllStaffRecords))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        tabManager.addTab("Staff", tabManagerStaff);

        comboProductsRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProductsRecordActionPerformed(evt);
            }
        });

        lblProductName.setText("Product Name:");

        lblProductPrice.setText("Price (£):");

        btnCreateProduct.setText("Create");
        btnCreateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateProductActionPerformed(evt);
            }
        });

        btnUpdateProduct.setText("Update");
        btnUpdateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateProductActionPerformed(evt);
            }
        });

        btnDeleteProduct.setText("Delete");
        btnDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabManagerProductsLayout = new javax.swing.GroupLayout(tabManagerProducts);
        tabManagerProducts.setLayout(tabManagerProductsLayout);
        tabManagerProductsLayout.setHorizontalGroup(
            tabManagerProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabManagerProductsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabManagerProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblProductsError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboProductsRecord, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tabManagerProductsLayout.createSequentialGroup()
                        .addComponent(btnCreateProduct)
                        .addGap(52, 52, 52)
                        .addComponent(btnUpdateProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteProduct))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabManagerProductsLayout.createSequentialGroup()
                        .addComponent(lblProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProductName))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabManagerProductsLayout.createSequentialGroup()
                        .addComponent(lblProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(txtProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 444, Short.MAX_VALUE))
        );
        tabManagerProductsLayout.setVerticalGroup(
            tabManagerProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabManagerProductsLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(comboProductsRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tabManagerProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductName)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabManagerProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductPrice)
                    .addComponent(txtProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabManagerProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateProduct)
                    .addComponent(btnUpdateProduct)
                    .addComponent(btnDeleteProduct))
                .addGap(18, 18, 18)
                .addComponent(lblProductsError)
                .addContainerGap(223, Short.MAX_VALUE))
        );

        tabManager.addTab("Products", tabManagerProducts);

        tabMain.addTab("Manager", tabManager);

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabMain)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLogout)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabMain, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogout)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        System.exit(0);             // Exits program
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // ALL TABS - Upon launch this method populates textboxes, comboboxes and set the global variables
        
        checkTheLogin();    // Password login for Staff and Manager on LOGIN TAB
        
        Data_Handler_Sale data_sale = new Data_Handler_Sale(); // Sales database handler
        Data_Handler_User data_user = new Data_Handler_User(); // User database handler
        
        txtSalesTotal.setText("£" + Double.toString(total));    // Sets total to 0
        
        // Sets first and second name together for STAFF / SALES RECORD and MANAGER / STAFF TABS
        String name = loginuser.getfirstName() + " " + loginuser.getlastName();
        String user = loginuser.getUsername();
        
        // Checks user is manager or staff and updates text on STAFF / SALES RECORD TAB
        if (loginuser.getManager())
        {
            String status = "Manager";
            txtSalesStaffRecord.setText("Hello there, " + name + "\n" + "Username: " + user + "\n" + "You are: " + status);
        } else {
            String status = "Staff";
            txtSalesStaffRecord.setText("Hello there, " + name + "\n" + "Username: " + user + "\n" + "You are: " + status);
        }
        
        salesFigures = data_sale.salesFigures(loginuser.getUsername()); // User sales figures ArrayList
        
        try {
            populateStaffSalesRecord(); // Updates staff sales record in STAFF / SALES RECORD TAB
            populateuserSalesData();  // Updates Staff sales data in STAFF / SALES RECORD TAB
        } catch (Exception error) {
            // Exception handling in the event of null data
            txtSalesRecords.setText("No Sales Yet"); 
            txtSalesDetails.setText("No Sales Yet");
        }
        
        populateStaffCombobox(data_user.returnUserList());  // Populates MANAGER / STAFF TAB combox with staff list
        populateProductList();                              // Populates MANAGER / PRODUCTS TAB combox with product list
        
    }//GEN-LAST:event_formWindowOpened

    private void btnApplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplesActionPerformed
        // STAFF / SALES Action event for pressing Apple button
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        for (int i = 0; i <= productMultiplier; i++)
        {
            products.add(data_product.returnProduct("Apple")); // Adds product object to ArrayList products
        }
        

        double price = data_product.returnProduct("Apple").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnApplesActionPerformed

    private void btnBlueberriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlueberriesActionPerformed
        // STAFF / SALES Action event for pressing Blueberries button
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Blueberry")); // Adds product object to ArrayList products
        }

        double price = data_product.returnProduct("Blueberry").fruitPrice;  // Finds product price
        total = total + price * productMultiplier;  // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
  
    }//GEN-LAST:event_btnBlueberriesActionPerformed

    private void btnPeachesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeachesActionPerformed
        // STAFF / SALES Action event for pressing Peaches button
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Peach")); // Adds product object to ArrayList products
        }
        
        double price = data_product.returnProduct("Peach").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnPeachesActionPerformed

    private void btnBananasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBananasActionPerformed
        // STAFF / SALES Action event for pressing Bananas button
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Banana")); // Adds product object to ArrayList products
        }
        
        double price = data_product.returnProduct("Banana").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnBananasActionPerformed

    private void btnPearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPearsActionPerformed
        // STAFF / SALES Action event for pressing Pears button
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Pear")); // Adds product object to ArrayList products
        }
        
        double price = data_product.returnProduct("Pear").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnPearsActionPerformed

    private void btnStrawberriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStrawberriesActionPerformed
        // STAFF / SALES Action event for pressing Strawberries button
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Strawberry")); // Adds product object to ArrayList products
        }
        
        double price = data_product.returnProduct("Strawberry").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnStrawberriesActionPerformed

    private void btnGrapesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrapesActionPerformed
        // STAFF / SALES Action event for pressing Grapes button
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Grape")); // Adds product object to ArrayList products
        }
        
        double price = data_product.returnProduct("Grape").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnGrapesActionPerformed

    private void btnPlumsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlumsActionPerformed
        // STAFF / SALES Action event for pressing Plums button
         Data_Handler_Product data_product = new Data_Handler_Product();
        
         for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Plum")); // Adds product object to ArrayList products
        }
        
        double price = data_product.returnProduct("Plum").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnPlumsActionPerformed

    private void btnMelonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMelonsActionPerformed
        // STAFF / SALES Action event for pressing Melons button
         Data_Handler_Product data_product = new Data_Handler_Product();
        
         for (int i = 0; i <= productMultiplier; i++)
        {
        products.add(data_product.returnProduct("Melon")); // Adds product object to ArrayList products
        }
        
        double price = data_product.returnProduct("Melon").fruitPrice; // Finds product price
        total = total + price * productMultiplier; // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total)); // Displays total
        
        populateSalesCombobox(); // Updates combobox of product added
        populateSalesRecords(); // Updates product list of item added
        
    }//GEN-LAST:event_btnMelonsActionPerformed

    private void btnClearItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearItemActionPerformed
        // STAFF / SALES Clear button action - removes product from selected item in combobox
        
        try {
            // User selected item via combobox
            String saleItem = comboSalesItems.getSelectedItem().toString();
            int poundPosition = saleItem.lastIndexOf("£");                                                 // Isolates pound sign
            String fruitNameWithoutEdits = saleItem.substring(saleItem.indexOf(":") +1, poundPosition);    // Isolates fruit name
            String fruitName = fruitNameWithoutEdits.replaceAll(" ", "");                                  // Removes spaces
        
            // Isolates user selected sales number
            String saleIDWithSpaces = saleItem.substring(0, saleItem.lastIndexOf(":"));     // Isolates number from combobox selection
            String saleIDString = saleIDWithSpaces.replaceAll(" ", "");                     // Removes spaces
            int saleID = Integer.parseInt(saleIDString);                                    // Converts isolated number to int
        
            // Data handler object
            Data_Handler_Product data_product = new Data_Handler_Product();
        
            // Total number control - prevents total from going below 0 and updates textbox
            if (total > 0)
            {
                total = total - data_product.returnProduct(fruitName).fruitPrice;
                txtSalesTotal.setText("£" + Double.toString(total));
            } else if (total <= 0) {
                total = 0;
                txtSalesTotal.setText("£" + Double.toString(total));
            }
        
            products.remove(saleID);                    // Removes selected product from the ArrayList
            comboSalesItems.removeItem(saleItem);       // Removes selected product from the combobox display

            populateSalesRecords();                     // Updates the product list text box
            populateSalesCombobox();                    // Updates the combobox on sales tab

        } catch (Exception error) {
            txtStaffSalesRecord.setText("No Sales Yet"); 
            txtStaffRecordDetails.setText("No Sales Yet");
        }
        
    }//GEN-LAST:event_btnClearItemActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
       // STAFF / SALES Checkout button - checks combobox and text area and adds all items to sales database
        
        Data_Handler_Sale data_Sale = new Data_Handler_Sale();      // Creating data handler object
        data_Sale.insertInToSales(loginuser, total);                // inserting sale into database

        
        // Sets combobox and sales display to blank after pressing checkout button
        comboSalesItems.removeAllItems();
        txtSalesItems.setText("");
        
        total = 0;                                                  // adds product price to total
        txtSalesTotal.setText("£" + Double.toString(total));        // Displays total
        
        populateStaffSalesRecord(); // Updates staff sales record in SALES RECORD TAB
        
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void comboStaffRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboStaffRecordsActionPerformed
        // MANAGER / STAFF TAB - Combobox selector of staff - changing staff members changes the details displayed
        
        // Creating data handlers for method
        Data_Handler_Sale data_sale = new Data_Handler_Sale();
        Data_Handler_User data_user = new Data_Handler_User();
        
        // Editing the combobox selection and isolating staff details
        String staffSelected = (String) comboStaffRecords.getSelectedItem();
        String firstName = staffSelected.substring(0, staffSelected.indexOf(" "));
        String lastNameWithSpace = staffSelected.substring(staffSelected.indexOf(" "), staffSelected.indexOf("-"));
        String lastName = lastNameWithSpace.replaceAll(" ", "");
        String usernameWithHyphen = staffSelected.substring(staffSelected.indexOf("-"));
        String usernameWithSpace = usernameWithHyphen.replaceAll("-", "");
        String username = usernameWithSpace.replaceAll(" ", "");
        
        // Manager return function - displays manager status
        boolean manager = data_user.checkIfManager(data_user.returnUser(username));
        if (manager) {
            txtStaffManager.setText("Manager");
        } else {
            txtStaffManager.setText("Staff");
        }
        
        // Updates textfields with user selected staff memebers data - (except password)
        txtStaffFirstName.setText(firstName);
        txtStaffLastName.setText(lastName);
        txtStaffUsername.setText(username);
        
        salesFigures = data_sale.salesFigures(username); // User selected staff sales figures ArrayList
        
        populateStaffDetails(firstName, lastName, username); // populates staff details within MANAGER / STAFF upon user selection
        
    }//GEN-LAST:event_comboStaffRecordsActionPerformed

    private void btnDeleteStaffRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStaffRecordActionPerformed
        // MANAGER / STAFF - DELETE function - deletes user selected sales info from database
        
        // Creating data handler for method
        Data_Handler_Sale data_sales = new Data_Handler_Sale();
        
        // Isolating the sale ID from combobox from user selection
        String saleSelection = (String) comboStaffSalesRecords.getSelectedItem();
        String saleWithSpaces = saleSelection.substring(0, saleSelection.indexOf("-"));
        String saleString = saleWithSpaces.replaceAll(" ", "");
        int saleID = Integer.parseInt(saleString);
        
        // Deletes user selected sale from sales database
        data_sales.deleteSales(saleID);
        
        // Editing the combobox selection and isolating staff details
        String staffSelected = (String) comboStaffRecords.getSelectedItem();
        String firstName = staffSelected.substring(0, staffSelected.indexOf(" "));
        String lastNameWithSpace = staffSelected.substring(staffSelected.indexOf(" "), staffSelected.indexOf("-"));
        String lastName = lastNameWithSpace.replaceAll(" ", "");
        String usernameWithHyphen = staffSelected.substring(staffSelected.indexOf("-"));
        String usernameWithSpace = usernameWithHyphen.replaceAll("-", "");
        String username = usernameWithSpace.replaceAll(" ", "");
        
        populateStaffDetails(firstName, lastName, username); // populates staff details within MANAGER / STAFF upon user selection after deletion
        
    }//GEN-LAST:event_btnDeleteStaffRecordActionPerformed

    private void btnDeleteAllStaffRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllStaffRecordsActionPerformed
        // MANAGER / STAFF - DELETE function - deletes user selected username sales info from the database
        
        // Creating data handler for method
        Data_Handler_User data_user = new Data_Handler_User();
        Data_Handler_Sale data_sales = new Data_Handler_Sale();
        
        // Isolating the user selected details from combobox
        String staffSelected = (String) comboStaffRecords.getSelectedItem();
        String firstName = staffSelected.substring(0, staffSelected.indexOf(" "));
        
        String lastNameWithSpace = staffSelected.substring(staffSelected.indexOf(" "), staffSelected.indexOf("-"));
        String lastName = lastNameWithSpace.replaceAll(" ", "");
        
        String usernameWithHyphen = staffSelected.substring(staffSelected.indexOf("-"));
        String usernameWithSpace = usernameWithHyphen.replaceAll("-", "");
        String username = usernameWithSpace.replaceAll(" ", "");
        
        // Deletes user selected username sales data from sales database
        data_sales.deleteSalesRecord(username);
        
        double value = 0.0;
        data_sales.insertInToSales(data_user.returnUser(username), value);  // Prevent null errors, all staff have 1 £0 sale added
        
        populateStaffDetails(firstName, lastName, username); // populates staff details within MANAGER / STAFF upon user selection after deletion
        
    }//GEN-LAST:event_btnDeleteAllStaffRecordsActionPerformed

    private void btnCreateStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateStaffActionPerformed
        // MANAGER / STAFF - CREATE function - Adds defined user details to the Staff database
        
        try {
            // Creating data handler objects
            Data_Handler_User data_user = new Data_Handler_User();
            Data_Handler_Sale data_sales = new Data_Handler_Sale();

            // Defining user selected variables for new staff member
            String firstName = txtStaffFirstName.getText();
            String lastName = txtStaffLastName.getText();
            String username = txtStaffUsername.getText();
            String password = txtStaffPassword.getText();
            String manager = txtStaffManager.getText().toLowerCase();

            // If manager = manager then status is defined as true
            if (manager.equals("Manager".toLowerCase()))
            {
                if (txtStaffPassword.getText().isBlank() ||           // Prevents empty fields from being entered into database
                        txtStaffFirstName.getText().isBlank() ||
                        txtStaffLastName.getText().isBlank()  ||
                        txtStaffUsername.getText().isBlank()  ||
                        txtStaffManager.getText().isBlank())
                {
                    lblStaffError.setText("All text fields must be filled out.");
                } else {
                    double value = 0.0;
                    boolean status = true;
                    User createUser = new User(firstName, lastName, username, password, status);
                    data_user.createUser(createUser);               // New user created
                    data_sales.insertInToSales(createUser, value);  // Prevent null errors, all new staff have 1 £0 sale added
                    lblStaffError.setText("Staff Created.");
                }
            } else {
                if (txtStaffPassword.getText().isBlank() ||           // Prevents empty fields from being entered into database
                        txtStaffFirstName.getText().isBlank() ||
                        txtStaffLastName.getText().isBlank()  ||
                        txtStaffUsername.getText().isBlank()  ||
                        txtStaffManager.getText().isBlank())
                {
                    lblStaffError.setText("All text fields must be filled out.");
                } else {
                    double value = 0.0;
                    boolean status = false;
                    User createUser = new User(firstName, lastName, username, password, status);
                    data_user.createUser(createUser);               // New user created
                    data_sales.insertInToSales(createUser, value);  // Prevent null errors, all new staff have 1 £0 sale added
                    lblStaffError.setText("Staff Created.");
                }
            }

        } catch (Exception error) {
            lblStaffError.setText("An error has occured.");
        }
        
    }//GEN-LAST:event_btnCreateStaffActionPerformed

    private void btnUpdateStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStaffActionPerformed
        // MANAGER / STAFF - UPDATE function - Updates defined user details to the Staff database
        
        try {
            // Creating data handler objects
            Data_Handler_User data_user = new Data_Handler_User();

            // Defining user selected variables for updating staff member
            String firstName = txtStaffFirstName.getText();
            String lastName = txtStaffLastName.getText();
            String username = txtStaffUsername.getText();
            String password = txtStaffPassword.getText();
            String manager = txtStaffManager.getText().toLowerCase();

            // If manager = manager then status is defined as true
            if (manager.equals("Manager".toLowerCase()))
            {
                if (txtStaffPassword.getText().isBlank() ||           // Prevents empty fields from being entered into database
                        txtStaffFirstName.getText().isBlank() ||
                        txtStaffLastName.getText().isBlank()  ||
                        txtStaffUsername.getText().isBlank()  ||
                        txtStaffManager.getText().isBlank())
                {
                    lblStaffError.setText("All text fields must be filled out.");
                } else {
                    boolean status = true;
                    User updateUser = new User(firstName, lastName, username, password, status);
                    data_user.updateUser(updateUser);               // User updated
                    lblStaffError.setText("Staff Updated.");
                }
            } else {
                if (txtStaffPassword.getText().isBlank() ||
                        txtStaffFirstName.getText().isBlank() ||
                        txtStaffLastName.getText().isBlank()  ||
                        txtStaffUsername.getText().isBlank()  ||
                        txtStaffManager.getText().isBlank())
                {
                    lblStaffError.setText("All text fields must be filled out.");
                } else {
                    boolean status = false;
                    User updateUser = new User(firstName, lastName, username, password, status);
                    data_user.updateUser(updateUser);               // User updated
                    lblStaffError.setText("Staff Updated.");
                }
            }

            populateStaffDetails(firstName, lastName, username); // populates staff details within MANAGER / STAFF upon user selection after update
        } catch (Exception error) {
            lblStaffError.setText("An error has occured.");
        }

    }//GEN-LAST:event_btnUpdateStaffActionPerformed

    private void btnDeleteStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStaffActionPerformed
        // MANAGER / STAFF - DELETE function - Deletes defined user details to the Staff database
        
        try {
            // Creating data handler objects
            Data_Handler_User data_user = new Data_Handler_User();

            // Defining user selected variables for deleting staff member
            String firstName = txtStaffFirstName.getText();
            String lastName = txtStaffLastName.getText();
            String username = txtStaffUsername.getText();
            String password = txtStaffPassword.getText();
            String manager = txtStaffManager.getText().toLowerCase();

            // If manager = manager then status is defined as true
            if (manager.equals("Manager".toLowerCase()))
            {
                boolean status = true;
                User deleteUser = new User(firstName, lastName, username, password, status);
                if (!loginuser.getUsername().equals(deleteUser.getUsername()))      // Prevents managers from deleting their own details
                {
                    data_user.deleteUser(deleteUser);                               // User deleted from database
                    lblStaffError.setText("Staff Deleted.");
                } 
                else if (loginuser.getUsername().equals(deleteUser.getUsername())) 
                {
                    lblStaffError.setText("Error: Managers cannot delete their own data.");
                }
            } else {
                boolean status = false;
                User updateUser = new User(firstName, lastName, username, password, status);
                data_user.deleteUser(updateUser);                                   // User deleted from database
                lblStaffError.setText("Staff Deleted.");
                }
            } catch (Exception error) {
                lblStaffError.setText("An error has occured.");
            }

    }//GEN-LAST:event_btnDeleteStaffActionPerformed

    private void comboProductsRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProductsRecordActionPerformed
        // MANAGER / PRODUCTS TAB - combobox - displays details of each product in textfields based upon user selection
        
        // User selection of product
        String productSelected = (String) comboProductsRecord.getSelectedItem();
        
        // Isolating product name
        String productNameWithHyphen = productSelected.substring(productSelected.indexOf("-"), productSelected.indexOf("£"));
        String productNameWithSpace = productNameWithHyphen.replaceAll("-", "");
        String productName = productNameWithSpace.replaceAll(" ", "");
        
        // Isolating price
        String PriceWithSign = productSelected.substring(productSelected.indexOf("£"));
        String price = PriceWithSign.replaceAll("£", "");
        
        // Displays product information from combobox selection
        txtProductName.setText(productName);
        txtProductPrice.setText(price);
        
    }//GEN-LAST:event_comboProductsRecordActionPerformed

    private void btnCreateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateProductActionPerformed
        // MANAGER / PRODUCTS - CREATE - creates a product from user selected information
        
        // Creating data handler objects
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        try {
            // Defining user selected variables for new product 
            String product = txtProductName.getText();
            String priceString = txtProductPrice.getText();
            double price = Double.parseDouble(priceString);
            
            if (txtProductName.getText().isBlank() ||           // Prevents empty fields from being entered into database
                        txtProductPrice.getText().isBlank())
            {
                    lblProductsError.setText("All text fields must be filled out.");
            } else {
                // Creating product object
                Product newProduct = new Product(product, price);
            
                // Adding product object to database
                data_product.createProduct(newProduct);  
            
                // Display product added to database to user
                lblProductsError.setText("Product created.");
            }
            
        } catch (Exception error) {
            lblProductsError.setText("An error has occured.");
        }
        
    }//GEN-LAST:event_btnCreateProductActionPerformed

    private void btnUpdateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateProductActionPerformed
        // MANAGER / PRODUCTS - UPDATE - updates a product from user selected information
        
        // Creating data handler objects
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        try {
            // User selection of product
            String productSelected = (String) comboProductsRecord.getSelectedItem();

            // Isolating productID
            String productIDWithSpace = productSelected.substring(0, productSelected.indexOf("-"));
            String productIDString = productIDWithSpace.replaceAll(" ", "");
            int productID = Integer.parseInt(productIDString);
            
            // Defining user selected variables for new product 
            String product = txtProductName.getText();
            String priceString = txtProductPrice.getText();
            double price = Double.parseDouble(priceString);
            
            
            if (txtProductName.getText().isBlank() ||           // Prevents empty fields from being entered into database
                        txtProductPrice.getText().isBlank())
            {
                    lblProductsError.setText("All text fields must be filled out.");
            } else {
                 // Updating product object
                Product updateProduct = new Product(product, price);
            
                // Updating product object to database
                data_product.updateProduct(updateProduct, productID);  
            
                // Display product updated to database to user
                lblProductsError.setText("Product updated.");
            }
           
        } catch (Exception error) {
            lblProductsError.setText("An error has occured.");
        }
        
    }//GEN-LAST:event_btnUpdateProductActionPerformed

    private void btnDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProductActionPerformed
        // MANAGER / PRODUCTS - DELETE - deletes a product from user selected information
        
        // Creating data handler objects
        Data_Handler_Product data_product = new Data_Handler_Product();
        
        try {
            // User selection of product
            String productSelected = (String) comboProductsRecord.getSelectedItem();

            // Isolating productID
            String productIDWithSpace = productSelected.substring(0, productSelected.indexOf("-"));
            String productIDString = productIDWithSpace.replaceAll(" ", "");
            int productID = Integer.parseInt(productIDString);
            
            // Deleting product object from database
            data_product.deleteProduct(productID);  
            
            // Display product deleted from database to user
            lblProductsError.setText("Product deleted.");
        } catch (Exception error) {
            lblProductsError.setText("An error has occured.");
        }
        
    }//GEN-LAST:event_btnDeleteProductActionPerformed

    private void btnCancelSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelSaleActionPerformed
        // STAFF / SALES Clear button action - removes all products in combobox
        
        products.removeAll(products);                        // Removes selected product from the ArrayList
        comboSalesItems.removeAllItems();                    // Removes selected product from the combobox display
        
        total = 0;                                           // Resets Sales total
        txtSalesTotal.setText("£" + Double.toString(total));

        try {
            populateSalesRecords();                          // Updates the product list text box
            populateSalesCombobox();                         // Updates the combobox on sales tab
        } catch (Exception error) {
            // Exception handling in the event of null data
            txtStaffSalesRecord.setText("No Sales Yet"); 
            txtStaffRecordDetails.setText("No Sales Yet");
        }
        
    }//GEN-LAST:event_btnCancelSaleActionPerformed

    private void comboBoxMultiplerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMultiplerActionPerformed
        // STAFF / SALES Product multipler to add multiple of one item
        
        String numberSelectedString = (String) comboBoxMultipler.getSelectedItem();
        int numberSelected = Integer.parseInt(numberSelectedString);
        productMultiplier = numberSelected;
        
    }//GEN-LAST:event_comboBoxMultiplerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EPOS_System_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EPOS_System_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EPOS_System_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EPOS_System_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EPOS_System_GUI().setVisible(true);
            }
        });
    }
    
      public void populateStaffSalesRecord() // Updates staff sales record in SALES RECORD TAB
       {
            Data_Handler_Sale data_sale = new Data_Handler_Sale();
            ArrayList<String> list = data_sale.userSalesRecord(loginuser.getUsername());

            for (int i = 0; i < list.size(); i++)
                {
                    txtSalesRecords.append(list.get(i));
                }
             
       } // End of Method
    
      public void populateSalesRecords()   // Populates the main text box on the STAFF / SALES TAB - displays ArrayList
        {
            txtSalesItems.setText("");
            for(Product fruit : products) 
            {
                txtSalesItems.append(fruit.getFruitName() + " £" + fruit.getFruitPrice() + "\n");
            }
        } // End of Method
    
      public void populateSalesCombobox()   
       {// Populates the combobox on the STAFF / SALES TAB - displays ArrayList and adds number in order of list
           comboSalesItems.removeAllItems();
           
           int itemNumber = 0;
           for (Product fruit : products)
           {
                String fruitName = fruit.getFruitName();
                double price = fruit.getFruitPrice();
                String output = itemNumber + ":" + fruitName + " " + "£" + price + " ";
                comboSalesItems.addItem(output);
                itemNumber++;
           }
       } // End of Method
       
      public void populateStaffCombobox(ArrayList<String> StaffList)
      {// Populates MANAGER / STAFF TAB combox with staff list
           for (String staff : StaffList)
           {
                comboStaffRecords.addItem(staff);
           }
      } // End of Method
      
      public void populateProductList()
      {
          Data_Handler_Product data_products = new Data_Handler_Product();
          
          for (int i = 0; i < data_products.productList().size(); i++)
                {
                    comboProductsRecord.addItem(data_products.productList().get(i));
                }
      }
      
      public void populateStaffDetails(String firstName, String lastName, String username)
      {// User selection method for combobox in MANAGER / STAFF TAB - populates staff data
          
        // Creating data handlers for method
        Data_Handler_Sale data_sale = new Data_Handler_Sale();
          
        // User Sales Data calculations
        double totalSales = calculateTotal(salesFigures, data_sale.managerSalesRecord(username));
        customerCounter = salesFigures.size();
        double average = totalSales / customerCounter;
        double highest = findHighest(salesFigures);
        double lowest = findLowest(salesFigures);
        
        // Populating user selected staff sales data
        txtStaffRecordDetails.setText(firstName + " " + lastName + " Sales records \n" 
                + "Total sales:" + "£" + totalSales + "\n"
                + "Total Customers: " + customerCounter + "\n"
                + "Average sales: " + "£" + average + "\n"
                + "Highest sale: " + "£" + highest + "\n"
                + "Lowest sale: " + "£" + lowest + "\n");
        
        // Populating user selected staff sales records
        ArrayList<String> list = data_sale.managerSalesRecord(username);
        txtStaffSalesRecord.setText("");
        for (int i = 0; i < list.size(); i++)
            {
                txtStaffSalesRecord.append(list.get(i));
            }
        
        // Populating user selected staff sales comboxbox for delete selection
        comboStaffSalesRecords.removeAllItems();
        
        for (int i = 0; i < list.size(); i++)
            {
                comboStaffSalesRecords.addItem(list.get(i));
            }
      } // End of Method
      
      public void populateuserSalesData()
      {
          Data_Handler_Sale data_sale = new Data_Handler_Sale();
          
        // User Sales Data
        double totalSales = calculateTotal(salesFigures, data_sale.userSalesRecord(loginuser.getUsername()));
        customerCounter = salesFigures.size();
        double average = totalSales / customerCounter;
        double highest = findHighest(salesFigures);
        double lowest = findLowest(salesFigures);
        
        txtSalesDetails.setText(loginuser.getfirstName() + " " + loginuser.getlastName() + " Sales records \n" 
                + "Total sales:" + "£" + totalSales + "\n"
                + "Total Customers: " + customerCounter + "\n"
                + "Average sales: " + "£" + average + "\n"
                + "Highest sale: " + "£" + highest + "\n"
                + "Lowest sale: " + "£" + lowest + "\n");
      } // End of Method
      
      public double calculateTotal(ArrayList<Double> salesFigures, ArrayList<String> SalesRecords) // Displays that days total sales
       {
           double totalValue = 0;
           
           for (String sale : SalesRecords) 
            {
                // Takes user Sales record and isolates the date
                String DateWithoutEdits = sale.substring(sale.indexOf(":"), sale.indexOf("£"));    
                String DateWithoutHyphens = DateWithoutEdits.replaceAll("-", "");
                String DateWithoutColon = DateWithoutHyphens.replaceAll(":", "");
                String date = DateWithoutColon.replaceAll(" ", "");
            
                if (date.contains(datecheck())) // Only displays that days records
                {
                    for(int i = 0; i < salesFigures.size(); i++)
                        {
                            totalValue += salesFigures.get(i);  // Add each sale for that day together
                        }
                    return totalValue;
                }
            }
            return totalValue;  // In the event of an error the total value returned will be empty
       } // End of Method
       
      public String datecheck() // Checks todays date to displays user sales data
      {
            String pattern = "dd-MM-yyyy";
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
            
            String now = simpleDateFormat.format(new Date());   
            String date = now.replaceAll("-", "");
            
            return date;
      } // End of Method
      
      public double findHighest(ArrayList<Double> salesFigures) // Finds highest sales figure from salesFigures ArrayList
      {
          double highest = salesFigures.get(0);
          
          for (int i = 0; i < salesFigures.size(); i++)
          {
              if (salesFigures.get(i) > highest)
              {
                  highest = salesFigures.get(i);
              }
          }
          return highest;
      } // End of Method
      
      public double findLowest(ArrayList<Double> salesFigures)  // Finds lowest sales figure from salesFigures ArrayList
      {
           double lowest = salesFigures.get(0);
          
          for (int i = 0; i < salesFigures.size(); i++)
          {
              if (salesFigures.get(i) < lowest)
              {
                  lowest = salesFigures.get(i);
              }
          }
          return lowest;
      } // End of Method
       
      public void checkTheLogin()   // Login - checks username and password against database on LOGIN TAB
        { 
            //programatically create the labels and texfields for the optionpane 
            JLabel label_login = new JLabel("Username:"); 
            JTextField login = new JTextField(); 
            JLabel label_password = new JLabel("Password:"); 
            JPasswordField password = new JPasswordField(); 
            //-----------------------------------------------------
            
             //store these in an object array 
            Object[] login_GUI_Elements = { label_login, login, label_password, password }; 
            //-----------------------------------------------------
            
            int userInteraction = JOptionPane.showConfirmDialog(null, login_GUI_Elements, "Login", 
                    JOptionPane.OK_CANCEL_OPTION, 
                    JOptionPane.PLAIN_MESSAGE); 
            
            //this integer variable 'userInteraction' will hold the result of 
            //the users interaction with the JOpttionPane 
            //we will then test the result against common returned values. OK OPtion , Cancel , Closed 
            //-----------------------------------------------------
    
            if (userInteraction == JOptionPane.OK_OPTION) 
            {
                String user=login.getText().trim();
                //user string that the user entered in the textfield 
                String pass=new String(password.getPassword()); 
                //pulls the password string from textfield 
                Boolean entryGranted = false ;
                //setup boolean as false.
                
                // Set user variables
                loginuser.setUsername(user);
                loginuser.setPassword(pass);
                
                // Creating data handler object for boolean login functions
                Data_Handler_User data_user = new Data_Handler_User();
                
                if (data_user.checkUserIsValid(loginuser) && data_user.checkIfManager(loginuser) == false) 
                    { JOptionPane.showMessageDialog(this, "Welcome " + data_user.returnUser(user).getfirstName() + " Logged in as user\nThe Admin panel will be removed \n Please have a good day"); 
                    //If an ordinary user logged in then remove the panel tabs that relate to administrators. 
                    this.tabMain.remove(tabManager); 
                    this.tabMain.remove(tabLogin);
                    entryGranted=true;
                    loginuser = data_user.returnUser(user);
                    }
            if (data_user.checkUserIsValid(loginuser) && data_user.checkIfManager(loginuser) == true) 
                {
                    JOptionPane.showMessageDialog(this, "Welcome " + data_user.returnUser(user).getfirstName() + ", you are logged in as manager\n You are granted access to all areas \n Please have a good day");
                    this.tabMain.remove(tabLogin);
                    entryGranted=true;
                    loginuser = data_user.returnUser(user);
                }
            if (!entryGranted) //entry denied 
                { JOptionPane.showMessageDialog(this, "Incorrect Password - Logging off"); 
                userInteraction = JOptionPane.CANCEL_OPTION;
                } 
            } 
            else 
                {
                //user clicked on CANCEL or the X close button- we change the userInteraction to force execution of the CANCEL block of code 
                    userInteraction = JOptionPane.CANCEL_OPTION; 
                }
            if ( (userInteraction == JOptionPane.CANCEL_OPTION) || (userInteraction == JOptionPane.CLOSED_OPTION) ) 
                 //the cancel block of code - if user presses the X or CANCEL 
                { 
                //feedback to user and close the application as no suitable login credentials have been supplied. 
                JOptionPane.showMessageDialog(this, "You have not supplied valid credentials\n the application will now terminate"); 
                System.exit(0); 
                } 
        }   // End of Method
      
      

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Sales;
    private javax.swing.JButton btnApples;
    private javax.swing.JButton btnBananas;
    private javax.swing.JButton btnBlueberries;
    private javax.swing.JButton btnCancelSale;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnClearItem;
    private javax.swing.JButton btnCreateProduct;
    private javax.swing.JButton btnCreateStaff;
    private javax.swing.JButton btnDeleteAllStaffRecords;
    private javax.swing.JButton btnDeleteProduct;
    private javax.swing.JButton btnDeleteStaff;
    private javax.swing.JButton btnDeleteStaffRecord;
    private javax.swing.JButton btnGrapes;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMelons;
    private javax.swing.JButton btnPeaches;
    private javax.swing.JButton btnPears;
    private javax.swing.JButton btnPlums;
    private javax.swing.JButton btnStrawberries;
    private javax.swing.JButton btnUpdateProduct;
    private javax.swing.JButton btnUpdateStaff;
    private javax.swing.JComboBox<String> comboBoxMultipler;
    private javax.swing.JComboBox<String> comboProductsRecord;
    private javax.swing.JComboBox<String> comboSalesItems;
    private javax.swing.JComboBox<String> comboStaffRecords;
    private javax.swing.JComboBox<String> comboStaffSalesRecords;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblProductPrice;
    private javax.swing.JLabel lblProductsError;
    private javax.swing.JLabel lblSalesTotal;
    private javax.swing.JLabel lblStaffDOB;
    private javax.swing.JLabel lblStaffDate;
    private javax.swing.JLabel lblStaffError;
    private javax.swing.JLabel lblStaffID;
    private javax.swing.JLabel lblStaffManager;
    private javax.swing.JLabel lblStaffName;
    private javax.swing.JTabbedPane tabLogin;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JTabbedPane tabManager;
    private javax.swing.JPanel tabManagerProducts;
    private javax.swing.JPanel tabManagerStaff;
    private javax.swing.JPanel tabSalesRecords;
    private javax.swing.JTabbedPane tabStaff;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtProductPrice;
    private javax.swing.JTextArea txtSalesDetails;
    private javax.swing.JTextArea txtSalesItems;
    private javax.swing.JTextArea txtSalesRecords;
    private javax.swing.JTextArea txtSalesStaffRecord;
    private javax.swing.JTextField txtSalesTotal;
    private javax.swing.JTextField txtStaffFirstName;
    private javax.swing.JTextField txtStaffLastName;
    private javax.swing.JTextField txtStaffManager;
    private javax.swing.JTextField txtStaffPassword;
    private javax.swing.JTextArea txtStaffRecordDetails;
    private javax.swing.JTextArea txtStaffSalesRecord;
    private javax.swing.JTextField txtStaffUsername;
    // End of variables declaration//GEN-END:variables
}
